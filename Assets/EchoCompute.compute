// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
Texture3D<float2> Current;
Texture3D<float2> Previous;
Texture3D<float2> Media;
RWTexture3D<float2> Next;
float timeStep;
float distanceStep;
float speedOfSound;
float damping;
float2 chaos;
float3 cubePosition;
float hueDamping;

float3 rgb2hsv(float3 c)
{
	float4 K = float4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);
	float4 p = c.g < c.b ? float4(c.bg, K.wz) : float4(c.gb, K.xy);
	float4 q = c.r < p.x ? float4(p.xyw, c.r) : float4(c.r, p.yzx);

	float d = q.x - min(q.w, q.y);
	float e = 1.0e-10;
	return float3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);
}


[numthreads(8,8,8)]
void CSMain(uint3 id : SV_DispatchThreadID, uint gid : SV_GroupIndex)
{

	float2 media = Media[id];
	float speedInMedium;
	
	if (all( isinf(media)  ) ){
		//empty space
		speedInMedium = speedOfSound;
		media = 0;
	}
	else if( all( media == float2(0,0)))
	{
		//something is there and it's not emissive
		speedInMedium = 0;
		media = 0;
	}
	else
	{
		//somethign is there and it's emissive
		speedInMedium = speedOfSound;
	}
	

	
	float A = (speedInMedium * timeStep) / distanceStep;
	A = A*A;
	float2 current = Current[id];
	float2 previous = Previous[id];

	float2 left = Current[id - uint3(1, 0, 0)];
	float2 right = Current[id + uint3(1, 0, 0)];
	float2 up = Current[id + uint3(0, 1, 0)];
	float2 down = Current[id - uint3(0, 1, 0)];
	float2 behind = Current[id - uint3(0, 0, 1)];
	float2 forward = Current[id + uint3(0, 0, 1)];

	
	if(all(id == uint3(128 + ((cubePosition - 128) * 128 / 16))))
	{
		media  = chaos;
	}


	float2 next;
	if(speedInMedium == speedOfSound)
		next = current + (1 - (float2(damping,200)*timeStep)) * (current - previous) + (media) + A * (left + right - (6 * current) + down + up + behind + forward) ;
	else
		next = 0;

	Next[id] = next;
}

