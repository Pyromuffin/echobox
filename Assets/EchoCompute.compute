// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWTexture3D<float> Current;
RWTexture3D<float> Previous;
RWTexture3D<float> Media;
float timeStep;
float distanceStep;
float speedOfSound;
float damping;
float chaos;

	uint linearIndex(uint3 index){
				
		return index.x + index.y * 256 + index.z * 65536;
				
	}

[numthreads(8,8,8)]
void CSMain (uint3 id : SV_DispatchThreadID, uint gid : SV_GroupIndex)
{
   
	float media = Media[id];
	//media = 300;

	float A = (media * timeStep )/distanceStep;
	A = A*A;
	float current = Current[id];
	float previous = Previous[id];

	float left = Current[id - uint3(1,0,0)];
	float right = Current[id + uint3(1,0,0)];
	float up = Current[id + uint3(0,1,0)];
	float down = Current[id - uint3(0,1,0)];
	float behind = Current[id - uint3(0,0,1)];
	float forward = Current[id + uint3(0,0,1)];

	if(all(id == uint3(128,128,128) ) )
		current = chaos;

	float next;
	//if(media == speedOfSound)
		next = current + (1-(damping*timeStep)) * (current- previous) + A * (left + right - (6* current) + down + up + behind + forward);
	//else
		//next = 0;

	Previous[id] = next;
}
