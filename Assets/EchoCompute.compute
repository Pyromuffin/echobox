// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
Texture3D<float4> Current;
Texture3D<float4> Previous;
Texture3D<float4> Media;
RWTexture3D<float4> Next;
RWTexture3D<half4> RayMarching;
float timeStep;
float distanceStep;
float speedOfSound;
float damping;
float4 chaos;
float4 chaos2;

float3 rgb2hsv(float3 c)
{
	float4 K = float4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);
	float4 p = c.g < c.b ? float4(c.bg, K.wz) : float4(c.gb, K.xy);
	float4 q = c.r < p.x ? float4(p.xyw, c.r) : float4(c.r, p.yzx);

	float d = q.x - min(q.w, q.y);
	float e = 1.0e-10;
	return float3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);
}


[numthreads(8,8,8)]
void CSMain(uint3 id : SV_DispatchThreadID, uint gid : SV_GroupIndex)
{

	float4 media = Media[id];
	//media = 300;

	float A = (media.a * timeStep) / distanceStep;
	A = A*A;
	float4 current = Current[id];
	float4 previous = Previous[id];

	float4 left = Current[id - uint3(1, 0, 0)];
	float4 right = Current[id + uint3(1, 0, 0)];
	float4 up = Current[id + uint3(0, 1, 0)];
	float4 down = Current[id - uint3(0, 1, 0)];
	float4 behind = Current[id - uint3(0, 0, 1)];
	float4 forward = Current[id + uint3(0, 0, 1)];

	if (all(id == uint3(120, 128, 128)))
		current = chaos;

	if (all(id == uint3(136, 128, 128)))
		current = chaos2;


	float4 next;
	if(media.a == speedOfSound)
		next = current + (1 - (damping*timeStep)) * (current - previous) + A * (left + right - (6 * current) + down + up + behind + forward);
	else
		next = 0;

	Next[id] = next;
	RayMarching[id] = next;
}

